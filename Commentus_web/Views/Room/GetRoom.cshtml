@using System.Text;
@model RoomModel

@{
    ViewData["Title"] = Model.Room.Name;
}

<div class="container-fluid h-100 m-0 p-0">
    <div class="row w-100 h-100 m-0">
        <div class="col h-100 border-end border-dark d-flex flex-column">
            <h1>Members:</h1>
            <div class="row overflow-auto w-100 align-items-center justify-content-center m-0 p-0">
            @foreach(var member in Model.Members)
            {
                var imgBytes = member.User.ProfilePicture;
                string img = imgBytes != null ? Convert.ToBase64String(imgBytes) : "";
                string imgUrl = string.Format("data:image/png;base64,{0}", img);
                <div class="row m-0 mt-2 rounded bg-secondary text-white align-items-center justify-content-center">
                    @if (img != "")
                    {
                        <div class="col-auto m-0 p-0 me-3 ms-1">
                            <img src="@imgUrl" style="width:50px;"/>
                        </div>
                        <div class="col-9 p-0">
                            <h4>@member.User.Name</h4>
                        </div>
                    }
                    else
                    {
                        <h4>@member.User.Name</h4>
                    }
                </div>
            }
            </div>
            <div class="row m-0 mt-auto align-items-center justify-content-center pt-1">
                    <button class="btn btn-primary w-100 row" onclick="addMember()">Add member</button>
                    <input id="username" type="text" class="w-100 row mt-1" placeholder="Username"/>
            </div>
        </div>
        <div class="col-6 h-100 border-end border-dark d-flex align-items-start justify-content-start flex-column p-0 ps-2">
            <div class="row w-100 m-0 overflow-auto" id="messages">
                @foreach (var message in Model.Messages)
                {
                    var imgBytes = message.User.ProfilePicture;
                    string img = imgBytes != null ? Convert.ToBase64String(imgBytes) : "";
                    string imgUrl = string.Format("data:image/png;base64,{0}", img);

                    <div class="row m-0 align-items-center justify-content-start mt-4">
                        <div class="col-auto m-0 p-0 me-4 ms-1">
                            <div class="row bg-secondary p-2 rounded text-white align-items-center justify-content-center">
                                <div class="col-auto"><img src="@imgUrl" style="width:25px;" /></div>
                                <div class="col-auto">@message.User.Name</div>
                            </div>
                        </div>
                        <div class="col-auto p-0">
                            <span>
                                @{
                                    byte[] messageBytes = message.Message;
                                    string messageString = Encoding.UTF8.GetString(messageBytes);
                                }
                                @messageString
                            </span>
                        </div>
                    </div>
                }
            </div>
            <div class="row align-items-center justify-content-center pt-1 mt-auto w-100 m-0">
                <div class="col-10 p-0 m-0 me-1">
                    <div class="input-group p-0">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">Message</span>
                        </div>
                        <input name="message" id="message" type="text" class="form-control p-0" aria-describedby="basic-addon1">
                    </div>
                </div>
                <div class="col-auto p-0 m-0">
                    <button onclick="sendMessage()" class="btn btn-primary text-white" type="submit">send</button>
                </div>
            </div>
        </div>
        <div class="col h-100 overflow-auto d-flex flex-column">
            <h1>Tasks: </h1>
            <div class="row overflow-auto w-100 align-items-center justify-content-center m-0 p-0" id="tasks">
            @foreach(var task in Model.Tasks)
            {
                    <div class="row m-0 mt-2 rounded bg-secondary text-white align-items-center justify-content-center">
                        @{
                            var name = new Dictionary<string, string> { { "Name", task.Task.Name } };
                        }
                    <div class="row"><h4><a asp-action="Index" asp-controller="Task"  asp-all-route-data="name" class="link-light">@task.Task.Name</a></h4></div>
                    <div class="row"><h5>Due date: @task.Task.DueDate.ToString("dd.MM.yyyy")</h5></div>
                </div>
            }
            </div>
            @{/*<div class="row m-2 mt-auto align-items-center justify-content-center">
                    <button class="btn btn-primary w-100">Add task</button>
            </div>*/}
        </div>      
    </div>
</div>

@section Scripts{
    <script type="text/javascript">

        $(document).ready(function(){
            $("#messages").scrollTop($("#messages")[0].scrollHeight);
        });

        function sendMessage(){
            var formData = {
                message: $("#message").val()
            }

            $.ajax({
                method: 'GET',
                url: '@Url.ActionLink("SendMessage")',
                data: formData
            }).done(function (data) {
                $('#message').val('');
            })
            .fail(function(data){
                alert("failed to send message");
            });
        };

        function addMember(){
            var formData = {
                username: $("#username").val()
            }

            $.ajax({
                method: 'GET',
                url: '@Url.ActionLink("AddMember")',
                data: formData
            }).done(function(data){
                $("#username").val('');
            })
            .fail(function(data){
                alert("failed to add member");
            })
        }

        //kinda dumb and inefficient solution, should use signalR hub instead, maybe will implement someday, but im too tired rn 😄
        setInterval(function () {
            $.ajax({
                url: '@Url.ActionLink("GetNewMessages")',
                method: 'GET'
            })
                .done(function (data) {
                    if (data != null) {
                        $('#messages').append(data);
                        $("#messages").scrollTop($("#messages")[0].scrollHeight);
                    }
                    getTasks();
                })
                .fail(function (data) {
                    alert("failed to get messages");
                });
        }, 2000);

        function getTasks() {
            $.ajax({
                url: '@Url.ActionLink("GetNewTasks")',
                method: 'GET'
            })
                .done(function (data) {
                    if (data != null) {
                        $('#tasks').append(data);
                    }
                })
                .fail(function (data) {
                    alert("failed to get tasks")
                });
        }

    </script>
}