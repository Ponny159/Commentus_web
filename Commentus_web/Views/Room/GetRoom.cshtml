@using System.Text;
@model RoomModel

@{
    ViewData["Title"] = Model.Room.Name;
}

<div class="container-fluid h-100 m-0 p-0">
    <div class="row w-100 h-100 m-0">
        <div class="col h-100 border-end border-dark d-flex flex-column">
            <h1>Members:</h1>
            <div class="row overflow-auto w-100 align-items-center justify-content-center m-0 p-0">
            @foreach(var member in Model.Members)
            {
                var imgBytes = member.User.ProfilePicture;
                string img = imgBytes != null ? Convert.ToBase64String(imgBytes) : "";
                string imgUrl = string.Format("data:image/png;base64,{0}", img);
                <div class="row m-0 mt-2 rounded bg-secondary text-white align-items-center justify-content-center">
                    @if (img != "")
                    {
                        <div class="col-auto m-0 p-0 me-3 ms-1">
                            <img src="@imgUrl" style="width:25px;"/>
                        </div>
                            <div class="col-9 p-2">
                                <a class="text-decoration-none text-white" asp-action="GetProfileById" asp-controller="Profile" asp-route-id="@member.User.Id">@member.User.Name</a>
                        </div>
                    }
                    else
                    {
                        <div class="col-9 p-2">
                                <a class="text-decoration-none text-white" asp-action="GetProfileById" asp-controller="Profile" asp-route-id="@member.User.Id">@member.User.Name</a>
                        </div>
                    }
                </div>
            }
            </div>
            <div class="row m-0 mt-auto align-items-center justify-content-center pt-1">
                    <button class="btn btn-primary w-100 row" onclick="addMember()">Add member</button>
                    <input id="username" type="text" class="w-100 row mt-1" placeholder="Username"/>
            </div>
        </div>
        <div class="col-6 h-100 border-end border-dark d-flex align-items-start justify-content-start flex-column p-0 ps-2">
            <div class="row w-100 m-0 overflow-auto" id="messages">
                @foreach (var message in Model.Messages)
                {
                    var imgBytes = message.User.ProfilePicture;
                    string img = imgBytes != null ? Convert.ToBase64String(imgBytes) : "";
                    string imgUrl = string.Format("data:image/png;base64,{0}", img);

                    <div class="row mt-4">
                        <div class="col-1"></div>
                        <small class="col-auto text-muted">@message.User.Name</small>
                        <small class="col-auto text-muted ps-2">@message.Timestamp</small>
                    </div>
                    <div class="row m-0 align-items-start justify-content-start mt-1">
                        <div class="col-auto m-0 p-0 me-4 ms-1">
                            <div class="row p-2 text-white align-items-center justify-content-center">
                                <div class="col-auto"><img src="@imgUrl" style="width:25px;" /></div>
                            </div>
                        </div>
                        @{
                            byte[] binaryData = message.Message;
                            string messageString = Encoding.UTF8.GetString(binaryData);

                            if ((binaryData.Length > 3 && binaryData[0] == 0xFF && binaryData[1] == 0xD8
                            && binaryData[binaryData.Length - 2] == 0xFF && binaryData[binaryData.Length - 1] == 0xD9)
                            || (binaryData[0] == 137 && binaryData[1] == 80 && binaryData[2] == 78 && binaryData[3] == 71
                            && binaryData[4] == 13 && binaryData[5] == 10 && binaryData[6] == 26 && binaryData[7] == 10))
                            {
                                string image = binaryData != null ? Convert.ToBase64String(binaryData) : "";
                                string imageUrl = string.Format("data:image/png;base64,{0}", Convert.ToBase64String(binaryData));

                                <div class="col-auto p-0">
                                    <img src="@imageUrl" />
                                </div>
                            }
                            else
                            {
                                string URIPattern = @"^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$";
                                if (System.Text.RegularExpressions.Regex.IsMatch(messageString, URIPattern))
                                {
                                    <div class="col-auto p-0">
                                        <img class="w-100" src="@messageString" />
                                    </div>
                                }
                                else
                                {
                                    <div class="col-9 d-flex h-100 align-items-center p-0 ps-2 rounded" style="background: #e8e8e8;">
                                        <span>
                                            @messageString
                                        </span>
                                    </div>
                                }
                            }
                        }
                    </div>
                }
            </div>
            <div class="row align-items-center justify-content-center pt-1 mt-auto w-100 m-0">
                <div class="col-10 p-0 m-0 me-1">
                    <div class="input-group p-0">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">Message</span>
                        </div>
                        <input name="message" id="message" type="text" class="form-control p-0" aria-describedby="basic-addon1">
                    </div>
                </div>
                <div class="col-auto p-0 m-0">
                    <button onclick="sendMessage()" class="btn btn-primary text-white" type="submit">send</button>
                </div>
            </div>
        </div>
        <div class="col h-100 overflow-auto d-flex flex-column">
            <h1>Tasks: </h1>
            <div class="row overflow-auto w-100 align-items-center justify-content-center m-0 p-0" id="tasks">
            @foreach(var task in Model.Tasks)
            {
                <div class="row m-0 mt-2 rounded bg-secondary text-white align-items-center justify-content-center">
                        @{
                            var name = new Dictionary<string, string> { { "Name", task.Task.Name } };
                        }
                    <div class="row"><a asp-action="Index" asp-controller="Task"  asp-all-route-data="name" class="link-light">@task.Task.Name</a></div>
                    <div class="row pb-2">Due date: @task.Task.DueDate.ToString("dd.MM.yyyy")</div>
                </div>
            }
            </div>
            <div class="row m-2 mt-auto align-items-center justify-content-center">
                    <a class="btn btn-primary w-100" asp-controller="Task" asp-route-roomId="@Model.Room.Id" asp-action="NewTask">Add task</a>
            </div>
        </div>      
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        let messagePage = 1;

        $(document).ready(function(){
            $("#messages").scrollTop($("#messages")[0].scrollHeight);
            receiveNewMessages();
        });

        $('#messages').scroll(function(){
            var pos = $('#messages').scrollTop();
            if(pos == 0){
                getNextPage();
                $("#messages").scrollTop(1);
            }
        });

        function sendMessage(){
            var formData = {
                message: $("#message").val(),
                roomName: '@Model.Room.Name'
            }

            $.ajax({
                method: 'GET',
                url: '@Url.ActionLink("SendMessage")',
                data: formData
            }).done(function (data) {
                $('#message').val('');
            })
            .fail(function(data){
                alert("failed to send message");
            });
        };

        function addMember(){
            var formData = {
                username: $("#username").val(),
                roomName: '@Model.Room.Name'
            }

            $.ajax({
                method: 'GET',
                url: '@Url.ActionLink("AddMember")',
                data: formData
            }).done(function(data){
                $("#username").val('');
            })
            .fail(function(data){
                alert("failed to add member");
            })
        }

        function receiveNewMessages(){
            $.ajax({
                url: '@Url.ActionLink("GetNewMessages")',
                method: 'GET',
                data: { roomName: '@Model.Room.Name' },
                success: function (data) {
                    if (data != null) {
                        $('#messages').append(data);
                        $("#messages").scrollTop($("#messages")[0].scrollHeight);
                    }
                    receiveNewMessages();
                }
            })
            .fail(function(data){
                alert(data);
            })
        }

        function getTasks() {
            $.ajax({
                url: '@Url.ActionLink("GetNewTasks")',
                method: 'GET',
                data: { roomName: '@Model.Room.Name' }
            })
                .done(function (data) {
                    if (data != null) {
                        $('#tasks').append(data);
                    }
                })
                .fail(function (data) {
                    alert("failed to get tasks")
                });
        }

        function getNextPage() {
            $.ajax({
                url: '@Url.ActionLink("GetNextPage")',
                method: 'GET',
                data: { page: messagePage, roomName: '@Model.Room.Name' }
            })
                .done(function (data) {
                    if (data != null){
                        $('#messages').prepend(data);
                        messagePage++;
                    }
                });
        }

    </script>
}